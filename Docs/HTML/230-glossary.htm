<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Glossary</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="000sms32v50.css" rel="stylesheet" type="text/css">
</head>

<body>
<table border="0" cellspacing="0" cellpadding="2">
  <tr>
    <td><a href="index.htm"><img src="005logo.PNG" alt="Site Logo" width="64" height="63"></a></td>
    <td><h1>Glossary</h1>
      <p><a href="http://www.softwareforeducation.com/" target="_blank">Website</a></p></td>
  </tr>
</table>
<p><a href="index.htm">Home</a> | <a href="220-ascii.htm">Previous</a> | <a href="240-hex-bin.htm">Next</a></p>
<h1>Glossary</h1>
<table border="1" cellspacing="0" cellpadding="2">
  <tr valign="top"> 
    <td><strong>386</strong></td>
    <td>CPU chips in IBM compatible computers are typically numbered 086, 186, 
      286, 386, 486, 586, Pentium Etc. 086 chips are now regarded as old fashioned 
      and slow. To run Windows, a 32 bit 386 chip was the minimum recommended.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>8 Bit CPU</strong></td>
    <td>The CPU has registers and connections to the outside world that are 8 
      bits wide. 16 bit and 32 bit CPUs are now more common, more powerful and 
      more expensive. 64 bit CPUs exist but are not common (2003)</td>
  </tr>
  <tr valign="top"> 
    <td><strong>80x86</strong></td>
    <td>The family of Intel chips numbered 8086, 80186, 80286, 80386, 80486 and 
      Pentium.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Accelerator Key</strong></td>
    <td>Improves your productivity. For example Alt+F4 closes the current window 
        and is quicker to press than the equivalent mouse or menu actions.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Analogue</strong></td>
    <td>Electronic systems that deal with continuously varying signals. Radio, 
      TV and HiFi systems are all analogue. CD Players are digital but the digital 
      signals must be converted to analogue before being sent to the HiFi system.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>ANSI</strong></td>
    <td>American National Standards Institute</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Architecture</strong></td>
    <td>CPU designs are more complex than typical building designs. Computer architecture 
      is equivalent to building architecture. To make best use of a computer, 
      it is useful to know something about the computer design or architecture.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>ASCII</strong></td>
    <td>The American Standard Code for Information Interchange. This is an eight 
      bit code. There are 128 characters which are standard. There are a further 
      128 characters that vary depending on the country and the graphics symbols 
      required by printers. American ASCII is being replaced by International 
      Unicode.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>ASM</strong></td>
    <td>The usual file extension for assembly code programs</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Assembler<br>
      Assembly code </strong></td>
    <td>Human readable commands like MOV AL,33 correspond closely to CPU machine 
      codes. The assembler program translates the human readable codes into machine 
      codes readable by the CPU</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Author</strong></td>
    <td>C Neil Bauers can be E Mailed on the internet at nbauers@samphire.demon.co.uk</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Backup copy </strong></td>
    <td>Copies of files kept in case of disaster. These should be kept in a secure 
      place away from the computer system they belong to. Important files should 
      be backed up in more than one place. Sod's law applies to back up files. 
      The file you really need is the one you have failed to back up.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Base Address </strong></td>
    <td>The start address of an object stored in memory. For example : The original 
      IBM PC VGA screen base address is B800:0000 followed by 4000 more bytes.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Binary</strong></td>
    <td>Base two numbers used by digital systems. Count with two symbols [ 0 1 
      ] Binary numbers are composed of noughts and ones. Electronically this is 
      achieved by circuits that are switched off or on.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Bit Masks </strong></td>
    <td>Patterns of noughts and ones used with AND, OR and XOR to extract or inserts 
      bits into bytes.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Bits</strong></td>
    <td>Binary digits. Single digits that are nought or one.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Byte </strong></td>
    <td>Eight Bits. The data in a byte can have many different meanings depending 
      on the context. A byte can represent a CPU command, an ASCII character, 
      a decimal number, a graphics pattern or anything you have programmed it 
      to represent.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Carriage Return </strong></td>
    <td>ASCII code 13 used to move the printer carriage or head to the left of 
      the page. The screen cursor performs in the equivalent way. See also - Line 
      Feed</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Case Sensitive</strong></td>
    <td>Upper and lower case are taken to be different. This simulator is not 
      case sensitive.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Chip</strong></td>
    <td>Shorthand for microchip or integrated circuit. The CPU is often referred 
      to as the CPU Chip.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Click</strong></td>
    <td>Usually the left mouse button being pressed when the mouse is pointing 
      at a screen object.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Clock</strong></td>
    <td>The CPU clock steps the computer and CPU at regular time intervals keeping 
      all parts of the computer in step. Typical clock speeds range between 1 
      to 500 Megahertz. 200 MHz was typical for a PC in 1997.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Comments</strong></td>
    <td>These begin with ';' and are used to explain what the program is doing. 
      Good comments explain why things are being done. Bad comments simply repeat 
      what is obvious by looking at the code.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Conditional Jumps </strong></td>
    <td>These jumps either take place or not depending on the flags in the status 
      register. See JS, JNS, JO, JNO, JZ, JNZ, JMP.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Control Key </strong></td>
    <td>This is used to give keys special meanings. For example the combination 
      of the control key with the F4 function key will close a window in some 
      software packages.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Control Systems </strong></td>
    <td>Industrial and domestic equipment is frequently controlled by a small 
      microcomputer called a microcontroller. The control system is programmed 
      once for life so a TV remote controller can not be re-programmed as a washing 
      machine controller.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>CPU</strong></td>
    <td>Central Processing Unit. The part of the computer that does the computations. 
      Usually this is a single microchip.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Cursor</strong></td>
    <td>A flashing symbol that indicates position within text. Alternatively the 
      mouse cursor indicates the mouse position. Special purpose cursors are used 
      in some software.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Data tables </strong></td>
    <td>These store numbers, text or pointers to other data objects. It is easier 
      to look after data in a table than data scattered throughout a program. 
      It is good style to use data tables.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Decimal Base 10 numbers. </strong></td>
    <td>Count and do arithmetic with ten symbols. [ 0 1 2 3 4 5 6 7 8 9 ]</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Digital Electronic </strong></td>
    <td>Systems that use binary. Computers use binary numbers and are digital. 
      HiFi systems do not use binary and are not digital. (A HiFi remote control 
      system is digital) See analogue.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Directory or Folder </strong></td>
    <td>File systems are organised into directories in much the same way that 
      filing cabinets are organised into draws and folders. Your files should 
      be stored in a directory that you have created. This keeps your files from 
      getting muddled up with all the other files on the computer.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Divide by zero </strong></td>
    <td>This will cause an error. Any number divided by zero is infinitely big. 
      This can not be calculated.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>End Of File </strong></td>
    <td>ASCII code 26 is used to indicate the end of MS DOS text files.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Escape ASCII code 27 </strong></td>
    <td>This character is often interpreted in a special way by programs, VDUs 
      and printers.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Executable Code </strong></td>
    <td>Non human readable program code executed by the CPU.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Explorer </strong></td>
    <td>See File Manager</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Extension </strong></td>
    <td>The MS DOS file extension is zero or more characters after the dot in 
      the file name. Word processor files often have .DOC on the end. Assembly 
      code files end in .ASM</td>
  </tr>
  <tr valign="top"> 
    <td><strong>F1 Key </strong></td>
    <td>Commonly this accesses the on line help.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>File </strong></td>
    <td>Data stored on disk or tape. When the data is loaded from the file into 
      RAM, it could consist of a program or data used by the program.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>File Manager or Explorer </strong></td>
    <td>A windows program that enables you to manage your files. Copying, renaming 
      and deleting files and directories are typical file management tasks.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Flags</strong></td>
    <td>The Interrupt, Sign, Zero and Overflow flags in the status register indicate 
      the outcome of the previous calculation. See S Flag, O flag and Z flag.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Floppy disk </strong></td>
    <td>Used to store files. 3.5 inch disks have a hard rectangular plastic casing 
      to protect the thin floppy disk inside. Older disks are actually floppy. 
      The case is bendy cardboard.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Folder </strong></td>
    <td>See Directory</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Function keys </strong></td>
    <td>F1, F2 ... F10. These keys have special purposes depending on the software 
      in use. F1 usually activates help. F10 usually activates the menu.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>General Purpose Registers</strong></td>
    <td>AL, BL, CL and DL are used to store data and perform calculations.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Gigahertz</strong></td>
    <td>1000 Megahertz. CPU Clock speeds are now measured in gigahertz.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Graphics</strong></td>
    <td>Images, pictures and geometrical shapes are examples of graphics. Windows 
      displays everything as graphics. This gives good looking displays but a 
      lot of processing is needed to achieve it.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Hard disk</strong></td>
    <td>A disk that can not normally be removed from the computer. Most computer 
      files are stored on the hard disk. There should also be backup copies stored 
      elsewhere in case the hard disk fails.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Hexadecimal </strong></td>
    <td>Base 16 numbers. Count and do arithmetic with 16 symbols. [ 0 1 2 3 4 
      5 6 7 8 9 A B C D E F ] Hexadecimal and Binary are easily converted which 
      is why hexadecimal is used.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Hot Keys</strong></td>
    <td>Ctrl+S and Ctrl+O are examples of hot keys. These give quick access to 
      menu options. Ctrl+S gives the File Save command. Ctrl+O gives the File 
      Open command.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>I Flag </strong></td>
    <td>The I or interrupt flag in the status register indicates if the CPU will 
      accept or ignore hardware interrupts. The commands CLI and STI clear and 
      set this flag. Hardware interrupts are used to signal events like &quot;Key 
      pressed&quot;, &quot;Disk Ready&quot;.or &quot;Printer out of paper.&quot; 
      A hardware timer can generate an interrupt at regular time intervals.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Immediate </strong></td>
    <td>The instruction MOV AL,25 is an example of an immediate instruction. See 
      also : Register, Indirect, Register indirect and MOV.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Indirect<br>
      Indirection </strong></td>
    <td>This is where data in RAM is referred to with a pointer. For example MOV 
      AL,[20] moves the data from RAM location 20 into the AL register. [20] is 
      a pointer to the RAM location. The technique is called indirection. See 
      MOV, Immediate, Register, Register indirect</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Instruction Pointer </strong></td>
    <td>IP points to the instruction being executed. When the instruction is complete, 
      the IP is moved onto the next instruction. In the RAM displays, the instruction 
      pointer is highlighted red with yellow text.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Instruction Set</strong></td>
    <td>The set of instructions that are recognised by a CPU. Typical instructions 
      are Move, Add and Subtract.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>interrupt code<br>
      interrupt handler<br>
      Interrupt routine </strong></td>
    <td>A program fragment designed to be activated at any time that an interrupt 
      occurs. The fragment is stored at an address pointed to by an interrupt 
      vector. Interrupts can be triggered by hardware. For example a key press 
      or the printer running out of paper cause a hardware interrupt. The CPU 
      switches to the code that handles the interrupt. When finished, the CPU 
      continues with its earlier task.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Interrupt Vector </strong></td>
    <td>A pointer stored in a table. The pointer points at the interrupt handler. 
      See INT.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>IO </strong></td>
    <td>Short for Input Output. See IN and OUT</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Least significant bit</strong></td>
    <td> LSB. The right hand bit in a byte which is worth 0 or 1.<br>
      MSB. The left hand bit in a byte which is worth 0 or 128.<br>
      Least and Most significant bits.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>LIFO</strong></td>
    <td>See Stack.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Line Feed </strong></td>
    <td>ASCII code 10 used to start a new line on the printed page or screen. 
      See also - Carriage Return.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>List File </strong></td>
    <td>This is generated by the simulator assembler. It contains the program 
      written by the programmer. It also contains the machine codes generated 
      by the assembler.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Low level </strong></td>
    <td>Low level programming is done using the CPU machine code or mnemonics 
      the are close to the machine codes.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>LSB</strong></td>
    <td>LSB. The right hand bit in a byte which is worth 0 or 1.<br>
      MSB. The left hand bit in a byte which is worth 0 or 128.<br>
      Least and Most significant bits. </td>
  </tr>
  <tr valign="top"> 
    <td><strong>Machine codes </strong></td>
    <td>Machine codes are executed by the CPU See Assembly codes. <br>
      Human readable commands look like this MOV AL,55<br>
      The hexadecimal equivalent looks like this D0 00 55<br>
      The binary machine code looks like this 110100000000000001010101 </td>
  </tr>
  <tr valign="top"> 
    <td><strong>A Megabyte</strong></td>
    <td>2<sup>24</sup> bytes to be precise or a million bytes approximately</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Megahertz</strong></td>
    <td>MHz. Million clock cycles per second. A 33 MHz clock means that the CPU 
      performs 33 million steps per second. These sorts of speeds are needed to 
      fill screens with high resolution graphics quickly.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Memory Mapped </strong></td>
    <td>Memory mapped hardware is controlled by writing data into memory locations 
      occupied by that hardware device. This simulator has a memory mapped screen 
      so each screen position corresponds to a memory location.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Microchip </strong></td>
    <td>Complex electronic circuits miniaturised onto a single wafer or chip of 
      silicon</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Microcontroller </strong></td>
    <td>Usually a single chip microcircuit containing a CPU, RAM and ROM. Microcontrollers 
      are used in TV remote controllers, washing machines, digital clocks, microwave 
      ovens, industrial plant controllers, car engine management systems and computer 
      games.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Microprocessor</strong></td>
    <td>A single chip CPU.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Mnemonic </strong></td>
    <td>A memorable and human readable item like MOV that corresponds to a non 
      memorable item like 11010000 that means the same thing.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Most significant bit MSB</strong></td>
    <td>LSB. The right hand bit in a byte which is worth 0 or 1.<br>
      MSB. The left hand bit in a byte which is worth 0 or 128.<br> <br>
      Most Significant Bit. The left hand bit in a byte. It has a value of 128 
      decimal or 80Hex if the byte is unsigned (positive numbers only). It has 
      a value of -128 if the byte is signed (positive and negative numbers). The 
      MSB has a value that depends on how wide in bits the data storage location 
      is.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Multiplexing</strong></td>
    <td>Combining two or more data flows onto a single carrying medium. For example 
      a thousand telephone calls can be carried on a single cable. De-multiplexing 
      separates the channels and routes them to their correct destinations.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>NULL </strong></td>
    <td>ASCII code zero used to mark the end of text strings.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>O Flag </strong></td>
    <td>The O or overflow Flag in the status register indicates if the previous 
      calculation overflowed its register.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Off Line </strong></td>
    <td>The network is disconected. However resources, can be made available locally 
      (off-line) even when the network is not available. When the network is re-connected, 
      the data files are synchronised so everyone gets the most up-to-date information.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>On Line</strong></td>
    <td>The network is connected. Computer resources are connected and available 
      and can be accessed with a negligible or short time delay. On line resources 
      usually involve interaction with the user.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>OP Code</strong></td>
    <td>A binary code that the CPU can interpret as a command. These correspond 
      to commands like MOV and ADD.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Operand</strong></td>
    <td>Essential data that comes after the op code.<br> <table border="1" cellspacing="0" cellpadding="2">
        <tr> 
          <td>MOV</td>
          <td>AL,</td>
          <td>55</td>
        </tr>
        <tr> 
          <td>Op-Code</td>
          <td>Operand</td>
          <td>Operand</td>
        </tr>
      </table></td>
  </tr>
  <tr valign="top"> 
    <td><strong>Overflow Flag </strong></td>
    <td>This is set if the result of the previous calculation was too big to fit 
      the register.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Parameters </strong></td>
    <td>Data passed into procedures of functions. Parameters can be passed using 
      registers (very fast), RAM locations (good for big data items) or the Stack 
      (useful if recursion is needed).</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Peripherals</strong></td>
    <td>Hardware plugged into the computer. Anything from a keyboard or mouse 
      to a power station or chemical works.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Pointers</strong></td>
    <td>In the command MOV AL,[25] the 25 is a pointer to the RAM location with 
      address 25. See indirection.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Ports</strong></td>
    <td>Input Output Ports. Peripherals are connected to ports. The IN and OUT 
      machine instructions are used to communicate with the peripherals.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Procedures</strong></td>
    <td>Small, modular, self contained, easily tested, code fragments that can 
      be used many times during the execution of a program. See CALL and RET in 
      the instruction set.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Process</strong></td>
    <td>A program that is running or loaded ready to run. Processes can be running, 
      ready to run or waiting. Waiting processes are usually queueing up for disk 
      or printer access. A waiting process might be waiting for its share of CPU 
      time.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Programs</strong></td>
    <td>Instructions executed by a computer to perform tasks.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>RAM</strong></td>
    <td>Random access memory. Electronic memory that stores bytes. Normal RAM 
      forgets what it was storing when switched off.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Recursion</strong></td>
    <td>A powerful technique where a procedure or function re-uses itself to achieve 
      a task.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Register</strong></td>
    <td>A location in the CPU where data is stored. This simulator has four general 
      purpose registers called AL, BL, CL and DL. It has special purpose registers 
      called IP, SR and SP.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Register</strong></td>
    <td>In the instruction CMP AL,BL registers are being compared. See also : 
      Immediate, Indirect, Register indirect.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Register indirect</strong></td>
    <td>In the instruction MOV AL,[BL] the BL register contains a pointer to a 
      RAM location. The data in this RAM location is moved into AL. This is a 
      register indirect move. See also : Immediate, Indirect and Register.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Repetition</strong></td>
    <td>This is achieved by using jump commands to make the program jump back 
      and repeat instructions.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Reset CPU </strong></td>
    <td>Reset the CPU to its switch on state. Clear the general purpose registers 
      to zero. Set IP to zero. Set the flags to Zero. Set the stack pointer to 
      BF. The stack grows downwards from address FB.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Return address </strong></td>
    <td>The address stored on the stack that the program returns to when a procedure 
      or interrupt is complete.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Run</strong></td>
    <td>Run a program. Programs are collections of stored instructions that are 
      usually inactive. To run a program, it must be copied from disk into RAM 
      and the CPU is given the address of the first instruction in the program 
      so it can run it. A running program is often called a process.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>S Flag </strong></td>
    <td>The S or sign flag in the status register indicates if the previous calculation 
      gave a negative result.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Save a file </strong></td>
    <td>Copy processed data from RAM onto disk.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Seven segment </strong></td>
    <td>displays are used in digital clocks, watches, calculators and so on. Numbers 
      are built up by illuminating combinations of the seven segments.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Scheduler</strong></td>
    <td>The scheduler is a process that manages all the other processes in a computer. 
      It aims to make best use of the hardware resources and to minimise delays 
      to processes and users.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Sign bit</strong></td>
    <td>The leftmost bit in a binary number that is used to indicate if the number 
      is positive or negative.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Sign Flag </strong></td>
    <td>This is set if a calculation gives a negative result.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Signed Numbers</strong></td>
    <td>Numbers where the left most bit is the sign bit.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Simulator </strong></td>
    <td>Computer software that models reality in some way. Virtual reality aims 
      to make the simulation so realistic that it seems real. Most simulations 
      are designed to be useful rather than realistic.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Source Code</strong></td>
    <td>The human readable program code typed into the computer. See executable 
      code.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>SP</strong></td>
    <td>The stack pointer register. In the RAM displays, the stack pointer is 
      highlighted blue with yellow text.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>SR</strong></td>
    <td>The status register. This contains flags that are set as a result of the 
      most recent calculation. A zero result will set the Z (zero) flag. A negative 
      result will set the S (sign) flag. A result too big to fit in a register 
      will set the O flag (overflow). If the I flag is clear (not set) interrupts 
      will be ignored.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Stack</strong></td>
    <td>An area of memory used for temporary storage according to the LIFO rule. 
      Last in First out. The stack is used to save register contents for later 
      restoration, pass parameters into procedures and return results, reverse 
      the order in which data is stored, save addresses so procedures can return 
      to the right place and there are other uses including doing postfix arithmetic.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Stack Pointer </strong></td>
    <td>Points to the next free location on the stack. In the RAM displays, the 
      stack pointer is highlighted blue with yellow text. The stack is memory 
      organised as LIFO last in first out. It is used to store return addresses, 
      the CPU state, parameters passed to procedures, results returned from procedures, 
      arithmetic data being processed and data whose order is to be reversed.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Status Flags<br>
      Status Register </strong></td>
    <td>The status Register contains status flags that indicate the outcome of 
      the previous calculation. The flags are Sign, Zero and Overflow. See SR.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Stepper motor </strong></td>
    <td>A special motor that rotates in small controlled angular movements. It 
      is used commonly in printers, plotters and medical instruments and disk 
      drives.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Task Switching </strong></td>
    <td>Use Alt Tab to task switch manually. Operating systems also task switch 
      automatically. For example when word processing, the clock display continues 
      to work because from time to time the operating system switches tasks to 
      keep both going.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Thermostat</strong></td>
    <td>A temperature controlled switch. On when too cold. Off when too hot.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Token List </strong></td>
    <td>When programs are translated into machine code, one of the first steps 
      is to convert the source code of the program into tokens. These are not 
      usually human readable. The tokens are designed to occupy minimal memory. 
      This simulator converts source code to tokens but does not bother to code 
      them to save memory. This is because the programs are too small use much 
      memory.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Twos complement </strong></td>
    <td>Binary numbers where the left most bit determines whether the number is 
      positive or negative.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Unicode</strong></td>
    <td>A 16 bit character code with 65536 text characters for all the languages 
      in the world including most dead (disused) languages. This code is replacing 
      ASCII.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Unsigned numbers </strong></td>
    <td>Numbers without a sign bit. These are always positive.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>USERINFO.REG </strong></td>
    <td>Simulator registration information is contained in this file. It is a 
      text file and has nothing to do with the Windows registry. The same file 
      format was used under Windows 3 which did not have a registry.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>VDU</strong></td>
    <td>Visual display unit. Computer output is commonly displayed on the VDU. 
      There are several VDU display technologies.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Write</strong></td>
    <td>A simple Windows word processor. Data is saved to disk in a format unique 
      to the Write program.</td>
  </tr>
  <tr valign="top"> 
    <td><strong>Z Flag</strong></td>
    <td>The Z or zero flag is set it the previous calculation result was zero.</td>
  </tr>
</table>
<p><a href="index.htm">Home</a> | <a href="220-ascii.htm">Previous</a> | <a href="240-hex-bin.htm">Next</a> 
</p>
<p>&copy; C Neil Bauers 2003 </p>
</body>
</html>
